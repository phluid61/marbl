
# class
#  * keyword
#  * creates new scope (not closure)
#
# func
#  * keyword
#  * creates new scope (not closure?)
#
# Lambdas $(){}
#   $(a,b){ ... }   arity=2
#   $(){ ... }      arity=0
#   $(a.*b){ ... }  arity=-2
#   $(*a){ ... }    arity=-1
#   ${ ... }        arity=-1
#
# extend
#  * function (?)
#  * appends scope to current scope's ancestry

class Object {
	def !@() false;
	def ==(o){ ... }
	def self(&b?) {
		if (given?(b))
			yield(self);
		else
			self;
	}
}

class Class {
	def new(*args) { construct; initialize(*args); }
	def extend(klass) { ... }
	def prepend(klass) { ... }
}

class Number {
	def < (o){ ... }
	def <=(o){ ... }
	def >=(o){ ... }
	def > (o){ ... }
	def <=>(o){ ... }
}
class ComplexNumber {
	extend(Number);
	def initialize(){
		@real_part = 0;
		@imaginary_part = 0;
	}
	def real_part(){ @real_part; }
	def imaginary_part(){ @imaginary_part; }
}
class Rational {
	extend(Number);
	def +(o){ ... }
	def -(o){ ... }
	def *(o){ ... }
	def /(o){ ... }
	def %(o){ ... }
	def **(o){ pow(self, o) }
	def //(o){ log(o) / log(self) }
	def -@(){ ... }
}
class Integer {
	extend(Rational);
	def ~@(){ ... }
	def &(){ ... }
	def |(){ ... }
	def ^(){ ... }
}

class String {
	def =~(o){ ... }
	def +(o){ ... }
	def *(o){ ... }
	def substr(start,length?) { ... }
}

