
# class
#  * keyword
#  * creates new scope (not closure)
#
# func
#  * keyword
#  * creates new scope (not closure?)
#
# Lambdas $(){}
#   $(a,b){ ... }   arity=2
#   $(){ ... }      arity=0
#   $(a.*b){ ... }  arity=-2
#   $(*a){ ... }    arity=-1
#   ${ ... }        arity=-1
#
# extend
#  * function (?)
#  * appends scope to current scope's ancestry

class Object {
	def !@() false;
	def ==(o){ ... }
	def self(&b?) {
		if (given?(b))
			yield(self);
		else
			self;
	}
}

class Class {
	def new(*args, &b?) {
		construct;
		initialize(*args);
		if (given?(b))
			eval(&b);
	}
	def extend(klass) { ... }
	def prepend(klass) { ... }
}

object False {
	def !@() true;
}

object Nil {
	def !@() true;
}

class Number {
	def < (o){ ... }
	def <=(o){ ... }
	def >=(o){ ... }
	def > (o){ ... }
	def <=>(o){ ... }
}
class ComplexNumber {
	extend(Number);
	def initialize(){
		@real_part = 0;
		@imaginary_part = 0;
	}
	def real_part(){ @real_part; }
	def imaginary_part(){ @imaginary_part; }
}
class Rational {
	extend(Number);
	def +(o){ ... }
	def -(o){ ... }
	def *(o){ ... }
	def /(o){ ... }
	def %(o){ ... }
	def **(o){ pow(self, o) }
	def //(o){ log(o) / log(self) }
	def -@(){ ... }
}
class Integer {
	extend(Rational);
	def ~@(){ ... }
	def &(o){ ... }
	def |(o){ ... }
	def ^(o){ ... }
}

class String {
	def =~(o){ ... }
	def +(o){ ... }
	def *(o){ ... }
	def substr(start,length?) { ... }
}


object Sequence {
	def fibonacci(n) {
		raise("Invalid index #{n}, must be >= 0") if (n < 0);
		return 0 if (n == 0);
		return 1 if (n <= 2);
		return self.fibonacci(n - 2) + self.fibonacci(n - 1);
	}
	def lucas(n) {
		raise("Invalid index #{n}, must be >= 0") if (n < 0);
		return 2 if (n == 0);
		return 1 if (n == 1);
		return self.lucas(n - 2) + self.lucas(n - 1);
	}
	def factorial(n) {
		raise("Invalid index #{n}, must be >= 0") if (n < 0);
		return 1 if (n == 0);
		return n * self.factorial(n - 1);
	}
}

