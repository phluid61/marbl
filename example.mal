
# class $Name {$scope}
#  * keyword
#  * not closure (?)
#  * 'def' in scope
#
# object $obj {$scope}
#
# func $name($args) {$scope}
#  * keyword
#  * creates new scope (not closure?)
#
# def $name($args) {$scope}
#  * keyword (only in class/object scope)
#  * creates 'func' and binds to current scope
#
# Lambdas $(){}
#   $(a,b){ ... }   arity=2
#   $(){ ... }      arity=0
#   $(a,*b){ ... }  arity=-2
#   $(*a){ ... }    arity=-1
#   ${ ... }        arity=-1
#

class Object {
	def !@() { false; }
	def ==(o){ ... }
	def self(&b?) {
		if (given?(b))
			yield(self);
		else
			self;
	}
}

class Class {
	def __init__() {
		@ancestors = [];
		@prepends = [];
	}
	def extend(klass) { @ancestors.append(klass); }
	def prepend(klass) { @prepends.prepend(klass); }
	def new(*args, &b?) {
		instance = {klass:this, eigenclass:{klass:Class}};
		instance.__init__(*args);
		if (given?(b))
			b.bind('this':instance).run();
		return instance;
	}
}

object true {}

object false {
	def !@() { true; }
}

object null {
	def !@() { true; }
}

class Number {
	def < (o){ ... }
	def <=(o){ ... }
	def >=(o){ ... }
	def > (o){ ... }
	def <=>(o){ ... }
}
class ComplexNumber {
	extend(Number);
	def __init__(r=0, i=0) {
		@real_part = r;
		@imaginary_part = i;
	}
	def real_part(){ @real_part; }
	def imaginary_part(){ @imaginary_part; }
}
class Rational {
	extend(Number);
	def __init__(n, d) {
		@numerator = n;
		@denominator = d;
	}
	def numerator() { @numerator; }
	def denominator() { @denominator; }
	def +(o){ ... }
	def -(o){ ... }
	def *(o){ ... }
	def /(o){ ... }
	def %(o){ ... }
	def **(o){ pow(self, o) }
	def //(o){ log(o) / log(self) }
	def -@(){ ... }
}
class Integer {
	extend(Rational);
	def __init__(i) {
		super.__init__(i, 1);
	}
	def ~@(){ ... }
	def &(o){ ... }
	def |(o){ ... }
	def ^(o){ ... }
}

class String {
	def =~(o){ ... }
	def +(o){ ... }
	def *(o){ ... }
	def substr(start,length?) { ... }
}


object Sequence {
	def fibonacci(n) {
		raise("Invalid index #{n}, must be >= 0") if (n < 0);
		return 0 if (n == 0);
		return 1 if (n <= 2);
		return self.fibonacci(n - 2) + self.fibonacci(n - 1);
	}
	def lucas(n) {
		raise("Invalid index #{n}, must be >= 0") if (n < 0);
		return 2 if (n == 0);
		return 1 if (n == 1);
		return self.lucas(n - 2) + self.lucas(n - 1);
	}
	def factorial(n) {
		raise("Invalid index #{n}, must be >= 0") if (n < 0);
		return 1 if (n == 0);
		return n * self.factorial(n - 1);
	}
}

